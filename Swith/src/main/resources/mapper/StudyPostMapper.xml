<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="lm.swith.main.mapper.StudyPostMapper">


	<!-- 스터디 포스트 및 기술 스택 정보 조회 -->
	<resultMap type="lm.swith.main.model.Skill" id="SkillResult">
		<id property="skill_no" column="skill_no" />
		<result property="skill_name" column="skill_name" />
		<result property="skill_img" column="skill_img" />
	</resultMap>

	<resultMap type="lm.swith.main.model.PostTechStacks"
		id="PostTechStackResult">
		<result property="post_no" column="POST_NO" />
		<result property="skill_no" column="SKILL_NO" />
		<result property="user_no" column="USER_NO" />
	</resultMap>

	<resultMap type="lm.swith.main.model.Mentor"
		id="MentorResult">
		<result property="user_no" column="USER_NO" />
		<result property="mentor_status" column="MENTOR_STATUS" />
		<result property="max_mentor_applicants"
			column="MAX_MENTOR_APPLICANTS" />
	</resultMap>

	<resultMap type="lm.swith.main.model.Mentee"
		id="MenteeResult">
		<result property="user_no" column="USER_NO" />
		<result property="mentee_status" column="MENTEE_STATUS" />
		<result property="max_mentee_applicants"
			column="MAX_MENTEE_APPLICANTS" />
	</resultMap>

	<resultMap type="lm.swith.main.model.StudyApplication"
		id="StudyApplicationResult">
		<result property="user_no" column="USER_NO" />
		<result property="status" column="STATUS" />
		<result property="max_study_applicants"
			column="MAX_STUDY_APPLICANTS" />
	</resultMap>


	<resultMap type="lm.swith.user.model.SwithUser"
		id="UsersResult">
		<id property="user_no" column="user_no" />
		<result property="email" column="email" />
		<result property="nickname" column="nickname" />
		<result property="password" column="password" />
		<result property="username" column="username" />
		<result property="user_profile" column="user_profile" />
		<result property="useraddress" column="useraddress" />
		<result property="user_introduction" column="user_introduction" />
		<result property="user_role" column="user_role" />
	</resultMap>

	<resultMap type="lm.swith.main.model.Comments"
		id="commentWithUser">
		<result property="comment_no" column="COMMENT_NO" />
		<result property="post_no" column="POST_NO" />
		<result property="user_no" column="USER_NO" />
		<result property="comment_content" column="COMMENT_CONTENT" />
		<result property="comment_post_time" column="COMMENT_POST_TIME" />
		<result property="user_profile" column="USER_PROFILE" />
		<result property="nickname" column="NICKNAME" />
	</resultMap>

	<resultMap type="lm.swith.main.model.Likes" id="LikesResult">
		<result property="post_no" column="POST_NO" />
		<result property="user_no" column="USER_NO" />
	</resultMap>

	<resultMap type="lm.swith.main.model.StudyPost"
		id="studyPostWithSkills">
		<id property="post_no" column="POST_NO" />
		<result property="user_no" column="USER_NO" />
		<result property="nickname" column="NICKNAME" />
		<result property="user_profile" column="USER_PROFILE" />
		<result property="study_title" column="STUDY_TITLE" />
		<result property="study_content" column="STUDY_CONTENT" />
		<result property="study_method" column="STUDY_METHOD" />
		<result property="recruit_type" column="RECRUIT_TYPE" />
		<result property="study_period" column="STUDY_PERIOD" />
		<result property="study_start" column="STUDY_START" />
		<result property="recruit_deadline" column="RECRUIT_DEADLINE" />
		<result property="study_status" column="STUDY_STATUS" />
		<result property="study_location" column="STUDY_LOCATION" />
		<result property="first_study" column="FIRST_STUDY" />
		<result property="study_post_time" column="STUDY_POST_TIME" />
		<result property="mentor_count" column="mentor_count" />
		<result property="mentee_count" column="mentee_count" />
		<result property="application_count" column="application_count" />
		<result property="studyroomend" column="STUDYROOMEND" />		
		<association property="user" resultMap="UsersResult" />
		<association property="mentor" resultMap="MentorResult" />
		<association property="mentee" resultMap="MenteeResult" />
		<association property="studyApplication"
			resultMap="StudyApplicationResult" />
		<association property="comments" resultMap="commentWithUser" />
		<collection property="studyPostWithSkills"
			resultMap="SkillResult" />
	</resultMap>
	<!-- ********************************************************* Main Page 
		Part ********************************************************************************* -->
	<!-- 스터디 전체 목록 OK -->
	<select id="getAllStudyPostWithSkills" resultMap="studyPostWithSkills">
	    SELECT sp.*,s.skill_no, s.skill_name, s.skill_img, u.*, c.*,
	    ( 
	    	SELECT COUNT(*)
	    	FROM likes l
	    	WHERE post_no = sp.post_no
	    ) AS likes_count
	    FROM STUDY_POST sp
	    LEFT JOIN post_tech_stacks pts ON sp.post_no = pts.post_no
	    LEFT JOIN skill s ON pts.skill_no = s.skill_no
	    LEFT JOIN likes l ON sp.post_no = l.post_no
	    LEFT JOIN users u ON sp.user_no = u.user_no
	    LEFT JOIN comments c ON sp.post_no = c.post_no
	    WHERE sp.study_status = 'O'
	</select>

		<!-- 댓글 리스트 -->
	<select id="getCommentList" parameterType="lm.swith.main.model.Comments">
		SELECT * FROM COMMENTS
	</select>

	<!-- 조건 sort 해서 검색 -->
		<resultMap type="lm.swith.main.model.StudyPost"
		id="studyPostWithSkills2">
		<id property="post_no" column="POST_NO" />
		<result property="user_no" column="USER_NO" />
		<result property="nickname" column="NICKNAME" />
		<result property="user_profile" column="USER_PROFILE" />
		<result property="study_title" column="STUDY_TITLE" />
		<result property="study_content" column="STUDY_CONTENT" />
		<result property="study_method" column="STUDY_METHOD" />
		<result property="recruit_type" column="RECRUIT_TYPE" />
		<result property="study_period" column="STUDY_PERIOD" />
		<result property="study_start" column="STUDY_START" />
		<result property="recruit_deadline" column="RECRUIT_DEADLINE" />
		<result property="study_status" column="STUDY_STATUS" />
		<result property="study_location" column="STUDY_LOCATION" />
		<result property="first_study" column="FIRST_STUDY" />
		<result property="study_post_time" column="STUDY_POST_TIME" />
		<result property="mentor_count" column="mentor_count" />
		<result property="mentee_count" column="mentee_count" />
		<result property="application_count" column="application_count" />
		<result property="studyroomend" column="STUDYROOMEND" />
		<association property="user" resultMap="UsersResult" />
    <collection property="studyPostWithSkills" resultMap="SkillResult" />
</resultMap>

<select id="getStudiesBySelect" parameterType="map" resultMap="studyPostWithSkills2">
    SELECT sp.*, s.skill_name, pts.skill_no, s.skill_no, u.user_profile
    FROM study_post sp
    JOIN post_tech_stacks pts ON sp.post_no = pts.post_no
    LEFT JOIN skill s ON pts.skill_no = s.skill_no
    LEFT JOIN users u ON sp.user_no = u.user_no
    WHERE 1=1 AND sp.study_status = 'O'
    AND sp.post_no IN (
        SELECT post_no FROM post_tech_stacks WHERE 
        <if test="skill_no != null and skill_no.size() > 0">
            skill_no IN
            <foreach collection="skill_no" item="skillNo" open="(" separator="," close=")">
                #{skillNo}
            </foreach>
        </if>
        <if test="skill_no == null or skill_no.size() == 0">
            1=1 <!-- This is true when skill_no is null or empty, so it won't affect the results -->
        </if>
    )
    <if test="recruit_type != null">
        AND sp.recruit_type = #{recruit_type}
    </if>
    <if test="study_method != null">
        AND sp.study_method = #{study_method}
    </if>
    <if test="study_location != null">
        AND sp.study_location = #{study_location}
    </if>
</select>


	<!-- 키워드 검색결과 스터디 목록 OK -->
	<select id="getStudiesByKeyword"
		resultType="lm.swith.main.model.StudyPost">
		SELECT sp.*, s.skill_name, s.skill_img
		FROM study_post sp
		LEFT JOIN post_tech_stacks pts ON sp.post_no = pts.post_no
		LEFT JOIN skill s ON pts.skill_no = s.skill_no
		WHERE sp.study_title LIKE '%' || #{keyword} || '%'
		OR sp.study_content LIKE '%' || #{keyword} || '%'
	</select>



	<!-- 스터디 등록 -->
	<!-- 스터디 정보 insert -->
	<insert id="insertStudyPost"
		parameterType="lm.swith.main.model.StudyPost">
		<selectKey keyProperty="post_no" resultType="Long"
			order="BEFORE">
			SELECT STUDY_POST_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		<!-- 첫 번째 쿼리: study_post 테이블에 스터디 정보 삽입 -->
		INSERT INTO study_post (
		POST_NO, USER_NO, NICKNAME, STUDY_TITLE, STUDY_CONTENT, RECRUIT_DEADLINE,
		STUDY_METHOD, RECRUIT_TYPE, STUDY_PERIOD,
		STUDY_LOCATION, FIRST_STUDY, STUDY_START
		) VALUES (
		#{post_no}, #{user_no}, (SELECT NICKNAME FROM USERS WHERE USER_NO = #{user_no}),
		#{study_title}, #{study_content}, #{recruit_deadline},
		#{study_method}, #{recruit_type}, #{study_period},
		#{study_location}, #{first_study}, #{study_start}
		)
	</insert>

	<!-- skill 정보 insert -->
	<insert id="insertSkill"
		parameterType="lm.swith.main.model.Skill">
		INSERT INTO skill (skill_no, skill_name)
		VALUES (#{skill_no}, #{skill_name})
	</insert>

	<!-- application 정보 insert -->
	<insert id="insertStudyApplication"
		parameterType="lm.swith.main.model.StudyApplication">
		INSERT INTO STUDY_APPLICATION (
		POST_NO, USER_NO, STATUS, MAX_STUDY_APPLICANTS
		) VALUES (
		#{post_no}, #{user_no}, '승인', #{max_study_applicants}
		)
	</insert>

	<!-- 기술 스택 정보 insert -->
	<insert id="insertPostTechStacks"
		parameterType="lm.swith.main.model.PostTechStacks">
		INSERT INTO POST_TECH_STACKS (POST_NO, SKILL_NO, USER_NO) VALUES (#{post_no},
		#{skill_no}, #{user_no})
	</insert>


	<!-- 게시글 작성시 카페 목록 검색 -->
	<select id="searchCafes" resultType="lm.swith.main.model.Cafes">
		SELECT * FROM cafes
		WHERE
		bplcnm LIKE '%' || #{keyword} || '%'
		OR sitewhladdr LIKE '%' ||
		#{keyword} || '%'
	</select>


	<!-- 카페목록 모두 가져오기 -->
	<select id="getAllCafes" resultType="lm.swith.main.model.Cafes">
		SELECT * FROM CAFES
	</select>


	<!-- ********************************************************* Likes Part 
		********************************************************************************* -->

	<!-- 스터디 찜 -->
	<insert id="addLikes" parameterType="lm.swith.main.model.Likes">
		INSERT INTO LIKES ( POST_NO,
		USER_NO)
		VALUES ( #{post_no}, #{user_no} )
	</insert>
	
	<!-- 스터디 찜 전체 목록 -->
	<select id="getLikesList" resultType="lm.swith.main.model.Likes">
		SELECT * FROM LIKES 
	</select>


	<!-- 스터디 찜 목록 -->
	<select id="isLiked" resultType="lm.swith.main.model.Likes">
		SELECT * FROM LIKES WHERE
		user_no = #{user_no} AND post_no = #{post_no}
	</select>


	<!-- 스터디 찜 삭제 -->
	<delete id="deleteLikes"
		parameterType="lm.swith.main.model.Likes">
		DELETE FROM LIKES WHERE post_no = #{post_no} AND user_no
		= #{user_no}
	</delete>
	
	 <!-- 게시글별 좋아요 목록 조회 -->
    <select id="likesCount" parameterType="Long" resultType="lm.swith.main.model.Likes">
        SELECT *
        FROM LIKES
        WHERE post_no = #{post_no}
    </select>

	<!-- ******************************************************** My Page Part 
		***************************************************************************** -->

	<!-- 내가 쓴 스터디 목록 OK -->
	<select id="getOwnStudiesWithUserNo"
		resultMap="studyPostWithSkills">
		SELECT sp.*, s.skill_name, s.skill_img
		FROM STUDY_POST sp
		LEFT JOIN post_tech_stacks pts ON sp.post_no = pts.post_no
		LEFT JOIN
		skill s ON pts.skill_no = s.skill_no
		WHERE sp.user_no = #{user_no}
	</select>


	<!-- 내가 찜한 스터디 목록 OK -->
	<select id="getAllStudiesWithLikes"
		resultMap="studyPostWithSkills">
		SELECT sp.*, s.skill_name, s.skill_img
		FROM study_post sp
		LEFT JOIN post_tech_stacks pts ON sp.post_no = pts.post_no
		LEFT JOIN skill s ON pts.skill_no = s.skill_no
		LEFT JOIN likes l ON sp.post_no = l.post_no
		WHERE l.user_no = #{user_no} AND sp.study_status = 'O'
	</select>


	<!-- 내가 참여한 스터디 목록 OK -->
	<select id="getAllStudiesWithUserNo"
		resultMap="studyPostWithSkills">
		SELECT sp.*, s.skill_name, s.skill_img, u.*
		FROM study_post sp
		LEFT JOIN post_tech_stacks pts ON sp.post_no = pts.post_no
		LEFT JOIN
		skill s ON pts.skill_no = s.skill_no
		LEFT JOIN study_application sa ON
		sp.post_no = sa.POST_NO
		LEFT JOIN users u ON u.user_no = sp.user_no
		WHERE sa.user_no = #{user_no} AND sa.status =
		'승인'
		ORDER BY sp.study_start DESC
	</select>

	<!-- 승인된 스터디 인원만 조회 -->
	<select id="getAllApplicantsByPostNoStudyRoom"
		resultMap="StudyApplicationResult" parameterType="Long">
		SELECT sa.*,u.nickname, u.USER_PROFILE, u.user_no
		FROM study_application sa
		LEFT JOIN users u ON sa.user_no = u.user_no
		WHERE sa.post_no = #{post_no} AND sa.status = '승인'
	</select>

	<!-- *********************************************************** Study Detail 
		Part ************************************************************************** -->


	<!-- 스터디 상세 페이지 OK -->
	<select id="getStudyPostByPostNo"
		resultSets="studyPost,mentor,mentee,application"
		resultMap="studyPostWithSkills">
		SELECT
		sp.*,
		s.skill_name,
		s.skill_img,
		m.USER_NO AS mentor_user_no,
		m.MENTOR_STATUS,
		m.MAX_MENTOR_APPLICANTS,
		me.USER_NO AS mentee_user_no,
		me.MENTEE_STATUS,
		me.MAX_MENTEE_APPLICANTS,
		sa.USER_NO AS application_user_no,
		sa.STATUS,
		sa.MAX_STUDY_APPLICANTS,
		c.comment_no,
		c.user_no,
		c.comment_content,
		c.comment_post_time,
		(
		SELECT COUNT(DISTINCT m.USER_NO)
		FROM mentor m
		WHERE m.POST_NO = sp.post_no AND m.MENTOR_STATUS = '승인'
		) AS mentor_count,
		(
		SELECT COUNT(DISTINCT me.USER_NO)
		FROM mentee me
		WHERE me.POST_NO = sp.post_no AND me.MENTEE_STATUS = '승인'
		) AS mentee_count,
		(
		SELECT COUNT(DISTINCT sa.USER_NO)
		FROM study_application sa
		WHERE sa.POST_NO = sp.post_no AND sa.STATUS = '승인'
		) AS application_count,
		(
		SELECT COUNT(*)
		FROM likes l
		WHERE post_no = sp.post_no
		) AS likes_count
		FROM study_post sp
		LEFT JOIN post_tech_stacks pts ON sp.post_no = pts.post_no
		LEFT JOIN skill s ON pts.skill_no = s.skill_no
		LEFT JOIN mentor m ON sp.post_no = m.POST_NO
		LEFT JOIN mentee me ON sp.post_no = me.POST_NO
		LEFT JOIN study_application sa ON sp.post_no = sa.POST_NO
		LEFT JOIN likes l ON sp.post_no = l.post_no
		LEFT JOIN comments c ON c.post_no = sp.post_no
		WHERE sp.post_no = #{post_no}
	</select>




	<!-- 스터디 수정 -->
	<update id="updateStudyPost"
		parameterType="lm.swith.main.model.StudyPost">
		<!-- 첫 번째 쿼리: study_post 테이블에 스터디 정보 업데이트 -->
		UPDATE study_post
		SET
		STUDY_TITLE = #{study_title},
		STUDY_CONTENT = #{study_content},
		
		WHERE
		POST_NO = #{post_no}
	</update>

	<!-- 두 번째 쿼리: 기술 스택 정보 업데이트 기존 스킬 정보를 삭제 후 다시 저장	
	<delete id="deletePostTechStacksUpdate" parameterType="long">
		DELETE
		FROM post_tech_stacks WHERE post_no = #{post_no}
	</delete>

	<insert id="insertPostTechStacksUpdate"
		parameterType="lm.swith.main.model.PostTechStacks">
		INSERT INTO post_tech_stacks (post_no, skill_no) VALUES
		<foreach collection="skills" item="skill" separator=",">
			(#{post_no}, #{skill})
		</foreach>
	</insert>
 -->

	<!-- application 정보 update -->
	


	<!-- 세 번째 쿼리: users 테이블에서 nickname 정보 가져와서 업데이트 -->

	<!-- -->

	<!-- 마감 기한 지난 스터디 목록 -->
	<select id="findExpiredStudyStatus"
		parameterType="lm.swith.main.model.StudyPost">
		<![CDATA[
		   SELECT * FROM study_post
		   WHERE recruit_deadline < CURRENT_DATE AND study_status = 'O'
		]]>
	</select>

	<!-- 마감 기한 지난 스터디 상태 업데이트 -->
	<update id="updateStudyStatus"
		parameterType="lm.swith.main.model.StudyPost">
		<![CDATA[
		   UPDATE study_post SET study_status = 'X'
		   WHERE recruit_deadline < CURRENT_DATE AND study_status = 'O'
		]]>
	</update>
	
	
	<!-- 스터디 삭제 삭제 OK -->
	<!-- 댓글 테이블에서 해당 post_no에 대한 댓글 정보 삭제 -->
	<delete id="deleteComments" parameterType="Long">
		DELETE FROM COMMENTS
		WHERE POST_NO = #{post_no}
	</delete>
	<!-- 스터디 신청 현황 테이블에서 해당 post_no에 대한 스터디 신청 정보 삭제 -->
	<delete id="deleteStudyApplication" parameterType="Long">
		DELETE FROM
		STUDY_APPLICATION WHERE POST_NO = #{post_no}
	</delete>
	<!-- 게시글의 기술스택 테이블에서 해당 post_no에 대한 기술 스택 정보 삭제 -->
	<delete id="deletePostTechStacks" parameterType="Long">
		DELETE FROM
		POST_TECH_STACKS WHERE POST_NO = #{post_no}
	</delete>
	<!-- 스터디(게시글) 테이블에서 해당 post_no에 대한 스터디 정보 삭제 -->
	<delete id="deleteStudyPost" parameterType="Long">
		DELETE FROM
		STUDY_POST WHERE POST_NO = #{post_no} AND STUDY_STATUS = 'O'
	</delete>



	<!-- ********************************************************* Study Application 
		Part *********************************************************************** -->


	<!-- 스터디 참가 신청 -->
	<insert id="addUsersByPostNo"
		parameterType="lm.swith.main.model.StudyPost">
		INSERT INTO study_application (POST_NO, USER_NO)
		VALUES (#{post_no}, #{user_no})
	</insert>

	<!-- 스터디 참가 신청자 목록 -->
	<select id="getAllApplicantsByPostNo"
		resultMap="StudyApplicationResult" parameterType="Long">
		SELECT sa.*,
		u.nickname
		FROM study_application sa
		LEFT JOIN users u ON sa.user_no = u.user_no
		WHERE sa.post_no = #{post_no} AND (sa.status = '대기' OR sa.status = '승인')
	</select>


	<!-- 스터디 승인 인원 카운트 -->
	<select id="getAcceptedApplicants"
		resultType="java.lang.Integer" parameterType="Long">
		SELECT COUNT(USER_NO)
		FROM STUDY_APPLICATION WHERE POST_NO = #{POST_NO} AND STATUS = '승인'
	</select>


	<!-- 스터디 최대 인원 조회 -->
	<select id="getMaxApplicants" resultMap="StudyApplicationResult"
		parameterType="Long">
		SELECT max_study_applicants FROM STUDY_POST WHERE
		POST_NO = #{POST_NO} AND MAX_STUDY_APPLICANTS IS NOT NULL
	</select>

	<!-- 스터디 참가 승인 -->
	<update id="acceptApplicant" parameterType="Long">
		UPDATE study_application SET
		status = '승인'
		WHERE post_no = #{post_no} AND user_no = #{user_no} AND status = '대기'
	</update>

	<!-- 스터디 참가 거절 -->
	<delete id="deleteApplicant" parameterType="Long">
		DELETE FROM
		study_application
		WHERE post_no = #{post_no} AND user_no = #{user_no}
		AND status = '대기'
	</delete>


	<!-- ********************************************************** Comments 
		Part *********************************************************************** -->


	<!-- 댓글 등록 -->
	<insert id="insertComment"
		parameterType="lm.swith.main.model.Comments">
		INSERT INTO COMMENTS (COMMENT_NO, USER_NO, POST_NO,
		COMMENT_CONTENT)
		VALUES (COMMENTS_SEQ.NEXTVAL, #{user_no}, #{post_no},
		#{comment_content})
	</insert>

	<select id="getCommentsByPostNo" resultMap="commentWithUser">
		SELECT c.*,
		u.nickname, u.user_profile FROM COMMENTS c
		LEFT JOIN users u ON
		c.user_no = u.user_no
		WHERE POST_NO = #{post_no} ORDER BY
		comment_post_time DESC
	</select>

	<!-- 댓글 수정 -->
	<update id="updateComment"
		parameterType="lm.swith.main.model.Comments">
		UPDATE COMMENTS
		SET
		COMMENT_CONTENT = #{comment_content}
		WHERE
		POST_NO = #{post_no}
		AND USER_NO = #{user_no}
		AND COMMENT_NO =
		#{comment_no}
	</update>


	<!-- 댓글 삭제 -->
	<delete id="deleteComment" parameterType="Long">
		DELETE FROM COMMENTS
		WHERE
		POST_NO = #{post_no}
		AND USER_NO = #{user_no}
		AND COMMENT_NO =
		#{comment_no}
	</delete>




	<!-- ********************************************************** Users Part 
		*********************************************************************** -->


	<!-- 유저 프로필 확인 OK -->
	<select id="getUserByUserNo" resultMap="UsersResult">
		SELECT * FROM USERS
		WHERE
		USER_NO = #{user_no}
	</select>


	<!-- 유저가 참여했던 스터디 목록은 mypage의 getAllStudiesWithUserNo 사용 -->

	<!-- 닉네임으로 게시글 검색 -->
	<select id="getStudiesByNickname"
		resultType="lm.swith.main.model.StudyPost">
		SELECT *
		FROM study_post
		WHERE nickname LIKE '%' || #{nickname} || '%'
	</select>

	<!-- 닉네임으로 댓글 검색 -->
	<select id="getCommentsByNickname"
		resultType="lm.swith.main.model.Comments">
		SELECT c.*, u.nickname
		FROM comments c
		LEFT JOIN users u ON
		c.user_no = u.user_no
		WHERE u.nickname LIKE '%' || #{nickname} || '%'
	</select>

	<!-- 유저 리스트 -->
	<select id="getAllUserList"
		parameterType="lm.swith.user.model.SwithUser">
		SELECT * FROM users
		WHERE nickname LIKE '%' ||
		#{nickname} || '%'
	</select>

	<!-- 유저 삭제 -->
	<delete id="deleteUserComment" parameterType="Long">
		DELETE FROM COMMENTS WHERE USER_NO = #{user_no}
	</delete>
	
	<delete id="deleteUserStudyApplication" parameterType="Long">
		DELETE FROM STUDY_APPLICATION WHERE USER_NO = #{user_no}
	</delete>
	
	<delete id="deleteUserPostTechStacks" parameterType="Long">
		DELETE FROM POST_TECH_STACKS WHERE USER_NO = #{user_no}
	</delete>
	
	<delete id="deleteUserLikes" parameterType="Long">
		DELETE FROM LIKES WHERE USER_NO = #{user_no}
	</delete>
	
	<delete id="deleteUserMoment" parameterType="Long">
		DELETE FROM STUDY_MOMENT WHERE USER_NO = #{user_no}
	</delete>
	
	<delete id="deleteUserRoomNotice" parameterType="Long">
		DELETE FROM STUDY_ROOM_NOTICE WHERE USER_NO = #{user_no}
	</delete>


	
	<delete id="deleteUserStudyPost" parameterType="Long">
		DELETE FROM STUDY_POST WHERE USER_NO = #{user_no}
	</delete>
	
	<delete id="deleteUser" parameterType="Long">
		DELETE FROM USERS WHERE USER_NO = #{user_no}
	</delete>

	<!-- 게시글 작성자의 user_no 찾기 -->
	<!-- 게시글 작성자의 user_no , 모집구분(스터디,프로젝트), 스터디방 제목 찾기 -->
	<select id="selectUserNoByPostNo" parameterType="lm.swith.main.model.StudyPost">
	SELECT USER_NO,RECRUIT_DEADLINE, RECRUIT_TYPE, STUDY_TITLE FROM STUDY_POST WHERE post_no = #{post_no}
	</select>

<!-- 스터디 알람용 찜 여부 확인 -->
	<select id="alarmLikeInfo" resultType="lm.swith.main.model.Likes">
		SELECT * FROM LIKES WHERE post_no = #{post_no}
	</select>
	
		<!-- 스터디방 종료 날짜 선언 -->
	<update id="updateStudyRoomEnd" parameterType="lm.swith.main.model.StudyPost">
	UPDATE STUDY_POST SET STUDYROOMEND = #{studyroomend} WHERE POST_NO = #{post_no}
	</update>

</mapper>
    
    
    